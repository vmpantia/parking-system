trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: Build
    jobs:
      - job: BuildJob
        displayName: 'Prepare Build'
        steps:

        # This step will restore the nuget packages of the projects or install dependencies
        - task: DotNetCoreCLI@2
          displayName: 'Restore'
          inputs:
            command: 'restore'
            projects: $(solution)
            feedsToUse: 'select'

        #This step will build the project or solution
        - task: DotNetCoreCLI@2
          displayName: 'Build'
          inputs:
            command: 'build'
            projects: $(solution)
            arguments: '--configuration $(buildConfiguration)'
            
        #This step will run the unit tests of the project
        - task: DotNetCoreCLI@2
          displayName: 'Test'
          inputs:
            command: 'test'
            projects: $(solution)
            arguments: '--configuration $(buildConfiguration)'
        
        #This step will generate publish file for deployment
        - task: DotNetCoreCLI@2
          displayName: 'Publish'
          inputs:
            command: 'publish'
            publishWebProjects: true
            arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
            zipAfterPublish: true

        #This step will store the published artifact to container
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact'
          inputs:
            PathtoPublish: '$(build.artifactstagingdirectory)'
            ArtifactName: 'files'
            publishLocation: 'Container'
          condition: succeeded()

  - stage: QA
    displayName: 'Deploy to QA'
    dependsOn: Build
    condition: succeeded('Build')
    jobs:
      - job: QADeploy
        displayName: 'QA Deployment'
        steps:
        
        #This step will download the published artifact
        - task: DownloadBuildArtifacts@1
          inputs:
            artifactName: 'files'
            downloadPath: '$(build.artifactstagingdirectory)'
            
        #This step will deploy the published artifact based on the publish profile below
        #- task: AzureWebApp@1
        #  inputs:
        #    azureSubscription: ''
        #    appType: 'webApp'
        #    appName: 'myapp'
        #    package: '$(Build.ArtifactStagingDirectory)/myapp.zip'
        #    deploymentMethod: 'zipDeploy'
        #    slotName: 'production'
        #    publishProfile: $(WebAppPublishProfile)

  - stage: UAT
    displayName: 'Deploy to UAT'
    dependsOn: QA
    condition: succeeded('QA')
    jobs:
      - job: UATDeploy
        displayName: 'UAT Deployment'
        pool: server
        steps:
        
        #This step will ask an permission first before proceeding in the deployment in UAT
        - task: ManualValidation@0
          displayName: 'Approve UAT Deployment?'
          inputs:
            notifyUsers: 'vincent.m.pantia@gmail.com'
            instructions: 'Do you want to deploy the changes in UAT?'
            onTimeout: reject
        
        #This step will download the published artifact
        - task: DownloadBuildArtifacts@1
          inputs:
            artifactName: 'files'
            downloadPath: '$(build.artifactstagingdirectory)'
            
  - stage: PROD
    displayName: 'Deploy to PROD'
    dependsOn: UAT
    condition: succeeded('UAT')
    jobs:
      - job: PRODDeploy
        displayName: 'PROD Deployment'
        pool: server
        steps:

        #This step will ask an permission first before proceeding in the deployment in PROD
        - task: ManualValidation@0
          displayName: 'Approve PROD Deployment?'
          inputs:
            notifyUsers: 'vincent.m.pantia@gmail.com'
            instructions: 'Do you want to deploy the changes in PROD?'
            onTimeout: reject
          
        #This step will download the published artifact
        - task: DownloadBuildArtifacts@1
          inputs:
            artifactName: 'files'
            downloadPath: '$(build.artifactstagingdirectory)'